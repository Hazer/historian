apply plugin: 'com.android.library'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.novoda.bintray-release'
apply plugin: 'jacoco'

apply from: '../gradle/dependencies.gradle'

android {
  compileSdkVersion 25
  buildToolsVersion "25.0.2"

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 25
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

  }
  buildTypes {
    debug {
      testCoverageEnabled true
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }
  }
}

dependencies {
  compile deps.appcompat

  androidTestCompile(deps.espresso, {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  testCompile deps.junit
  testCompile deps.robolectric
}

publish {
  artifactId = 'historian-core'
  desc = "a simple logger which saves logs to SQLite, to get better understanding of user's environment"

  def metadata = project.rootProject.ext.metadata
  groupId = metadata.groupId
  publishVersion = metadata.version
  website = metadata.website
  repository = metadata.repository
  licences = metadata.licences
}

// A list of directories which should be included in coverage report
def coverageSourceDirs = ['src/main/java']
// A list of files which should be excluded from coverage report since they are generated and/or framework code
def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/com/android/**/*.*']

task jacocoTestReportDebug(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  reports {
    xml.enabled true
    html.enabled true
    csv.enabled false
    xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReportDebug.xml"
    html.destination "${buildDir}/reports/coverage/debug"
    classDirectories = files(
        fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            exclude: coverageExcludeFiles))
  }
  sourceDirectories = files(coverageSourceDirs)
  executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"

  doLast {
    println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReportDebug.xml"
    println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
  }
}